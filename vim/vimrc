" .vimrc file
" Created by Roman Zaynetdinov
" //github.com/zaynetro
"

" Vim options {{{

set modelines=1       " Enable file specific overrides
"set nocompatible     " Use Vim settings, rather than Vi (not working in neovim)
set mouse=a           " Enable mouse in all modes
set background=dark
set number            " Show line numbers
set relativenumber    " Show relative line numbers
set cursorline        " Highlight current line
set lazyredraw        " Redraw only when need to
set showmatch         " Highlight matching [{()}]
set incsearch         " Search as characters are entered
set ignorecase        " Case-insensitive search
set hlsearch          " Highlight search results
set showbreak=â‡‡       " Char to show on the wrapped lines
set showcmd           " Show typed command

" }}}


" Key mappings {{{

let mapleader=","     " Set leader key binding
" Quick escape
imap jk <ESC>
" Space open/closes folds
nnoremap <space> za

" }}}


" Formatting options {{{

set expandtab         " Tabs are spaces
set tabstop=2         " Number of visual spaces per tab
set softtabstop=2     " Number of spaces in tab when editing
set shiftwidth=2      " Number of columns to use for >< commands
filetype indent on    " Load filetype specific indent files

autocmd Filetype haskell setlocal ts=4 sts=4 sw=4 expandtab

" }}}


" Backups {{{

" Store vim tmp files in different directory
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" }}}


" Folding {{{

set foldmethod=syntax    " Fold based on syntax
set foldlevelstart=99

" }}}


" Functions {{{

" Fix <C-h> in neovim and tmux
" https://github.com/neovim/neovim/issues/2048
" https://github.com/christoomey/vim-tmux-navigator#it-doesnt-work-in-neovim-specifically-c-h
if has('nvim')
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif

" Strips trailing whitespace at the end of files
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Column 80 marker
" highlight OverLength ctermbg=red ctermfg=white guibg=#660000
" match OverLength /\%81v.\+/
if exists('+colorcolumn')
  set colorcolumn=80
endif

" }}}


" Plugins {{{

" Vim plug
call plug#begin('~/.vim/plugged')

" Defaults everyone can agree on
Plug 'tpope/vim-sensible'
" Alignment
Plug 'godlygeek/tabular'
" Markdown support
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
" Status/tabline
Plug 'bling/vim-airline'
" Quoting/parenthesizing
Plug 'tpope/vim-surround'

" Git gutter
Plug 'airblade/vim-gitgutter'
" Improved JavaScript indentation and syntax
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" React JSX support
Plug 'mxw/vim-jsx'
" Go development
Plug 'fatih/vim-go', { 'for': 'go' }
" Autocompletion
if has('nvim')
  Plug 'Shougo/deoplete.nvim'
endif

" Highlights nginx configuration
Plug 'vim-scripts/nginx.vim', { 'for': 'nginx' }
" Tree explorer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Show git status in NERDTree
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
" Distraction free writing
Plug 'junegunn/goyo.vim'

" Navigate between vim and tmux panes
Plug 'christoomey/vim-tmux-navigator'
" Robot framework syntax
Plug 'mfukar/robotframework-vim', { 'for': 'robot' }
" Rust lang support
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
" Toml support
Plug 'cespare/vim-toml', { 'for': 'toml' }

" Deoplete go autocompletion
if has('nvim')
  Plug 'zchee/deoplete-go', { 'for': 'go', 'do': 'make' }
endif
" Display docs
Plug 'Shougo/echodoc.vim'
" Haskell ghc mod
Plug 'eagletmt/ghcmod-vim', { 'for': 'haskell' } |
\ Plug 'Shougo/vimproc.vim', { 'do': 'make' } " dependency
" Haskell autocompletion
Plug 'eagletmt/neco-ghc', { 'for': 'haskell' }
" Haskell syntax
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }

" Finder
Plug 'ctrlpvim/ctrlp.vim'
" Surf through buffers historically
Plug 'ton/vim-bufsurf'
" Search in files
Plug 'dyng/ctrlsf.vim'
" Hybrid color theme
Plug 'w0ng/vim-hybrid'

" Neomake syntastic replacement for neovim
Plug 'neomake/neomake'
" Calculate folding only when folds are used
Plug 'Konfekt/FastFold'
" Commenting
Plug 'tpope/vim-commentary'

call plug#end()

" }}}


" Plugin configurations {{{1

" == Vim sensible == {{{2
set list   "Makes whitespace chars visible
" }}}


" == Tabular == {{{2
" :Tabularize /,[/r1c1l0]   Aligns words separated by comma(,) in selected
"                           lines. l - left alignment, r - right, c - center.
"                           Number specifies how many spaces to insert.
" }}}


" == Vim markdown == {{{2
let g:vim_markdown_folding_disabled=1 " Markdown
" }}}


" == Vim airline == {{{2
" Integrates automatically
" }}}


" == Vim surround == {{{2
" Given: "Hello world"
"   Press cs"'   -> 'Hello world'
"   Press cs"<q> -> <q>Hello world</q>
"   Press ds"    -> Hello world
" }}}


" == Git gutter == {{{2
" Disable realtime check:
"   let g:gitgutter_realtime = 0
"   let g:gitgutter_eager = 0
" }}}


" == Vim JavaScript == {{{2
" Highligh html/css inside JS
let g:javascript_enable_domhtmlcss = 1
" }}}


" == Vim Go == {{{2
" :Gopath [path]  Override gopath
" :GoLink
" :GoDoc
" :GoDocBrowser
" :GoVet[!]  `go vet` (! - jump to first error)
" :GoDef [identifier]
" :GoTest[!]
" :GoTestFunc[!] [expand]
" :GoErrCheck
" :GoFiles  Show source files that depend on the current package
" :GoDeps
" :GoCallees  Show callees
" :GoCallers
" :GoChannelPeers  Show possible senders/receivers for the channel

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" goimport automatically inserts import paths
let g:go_fmt_command = "goimports"
" Don't collide with Syntastic
let g:go_fmt_fail_silently = 1
let g:go_list_type = "quickfix"
" }}}


" == Deoplete == {{{2
if has('nvim')
  let g:deoplete#enable_at_startup = 1
endif
" Use tab to forward cycle
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" Use tab to backward cycle
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
" Close the documentation window when completion is done
if has('nvim')
  autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
endif
" }}}


" == Nginx.cong == {{{2
" :setfiletype nginx   To enable
" }}}


" == NERDTree == {{{2
" Type ? to see instant help
let NERDTreeShowHidden = 0
map <C-n> :NERDTreeToggle<CR>  " toggle NERDTree
" Do not override vim tmux navigator mappings
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'
" }}}


" == NERDCommenter == {{{2
" <leader>cc   Comment out current line or selected in visual mode
" <leader>ci   Toggle the comment state of the selected line(s)
" <leader>c$   Comments current line till the end of line
" <leader>cA   The same as <leader>c$ , but ends in insert mode
" <leader>cu   Uncomment the selected line(s)
let NERDSpaceDelims=1 " Leave a space after the comment character
" }}}


" == Syntastic == {{{2
" :lnext  Jump to next error
" :lprev  Jump to prev error
" :Errors  Show list of errors
" :SyntasticToggleMode  Toggle between active and passive modes
" :SyntasticCheck
" :SyntasticInfo
"
" Enable syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 2
let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_cursor_column = 0
let g:syntastic_check_on_wq = 1
let g:syntastic_auto_jump = 0
let g:syntastic_enable_balloons = 0
let g:syntastic_aggregate_errors = 1

let g:syntastic_javascript_checkers = ['eslint']

" https://github.com/alecthomas/gometalinter
" To refresh dependencies: `gometalinter --update --install --force`
let g:syntastic_go_checkers = ['gometalinter']
let g:syntastic_go_gometalinter_args = '--fast --vendor -D gotype'
" }}}


" == Goyo == {{{2
" :Goyo   To enable
" :Goyo [Width][XOffset][x[Height][YOffset]]
"   Ex: :Goyo 50x85% or :Goyo 50%+25%x50%-25%
" :Goyo!  To disable
" }}}


" == Rust lang == {{{2
let g:rustfmt_autosave = 1  " Auto format rust code
" }}}


" == Deoplete-go == {{{2
" Align second column
if has('nvim')
  let g:deoplete#sources#go#align_class = 1
endif
" }}}


" == Echodoc == {{{2
set cmdheight=2
set noshowmode
let g:echodoc#enable_at_startup = 1
" Disable preview window
set completeopt-=preview
" }}}


" == Haskell ghc mod == {{{2
" Insert signature of selected expression
map <silent> tw :GhcModTypeInsert<CR>
" Insert missing function implemenations
map <silent> ts :GhcModSplitFunCase<CR>
" Query expression type (multiple times to expand)
map <silent> tq :GhcModType<CR>
" Clear selection
map <silent> te :GhcModTypeClear<CR>
" }}}


" == CtrlP == {{{2
" open with <c-p>
" cycle using <c-j>, <c-k>
" <c-n>, <c-p> to the next previous string in the history
" <c-y> to create new file
" <c-z> to mark/unmark files and <c-o> to open them
" <c-d> search by filename (not path)
" <c-r> switch to regex mode
" <c-f>, <c-b> cycle between modes
" <F5> refresh cache
nnoremap <Leader>pl :CtrlPLine<Cr>
let g:ctrlp_user_command = 'ag %s -l --nocolor --nogroup --hidden
      \ --ignore .git
      \ -g ""'
let g:ctrlp_custom_ignore = '\v[\/](node_modules)|(\.(git))$'
" }}}



" == BufSurf == {{{2
nnoremap <Leader>pp :BufSurfBack<Cr>
nnoremap <Leader>nn :BufSurfForward<Cr>
" }}}


" == CtrlSF == {{{2
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
nmap     <C-F>l <Plug>CtrlSFQuickfixPrompt
vmap     <C-F>l <Plug>CtrlSFQuickfixVwordPath
vmap     <C-F>L <Plug>CtrlSFQuickfixVwordExec

"let g:ctrlsf_auto_close = 0
"let g:ctrlsf_confirm_save = 0 " Turn off file edit confirmation
let g:ctrlsf_indent = 2 " Spaces between line number and line content
" }}}


" == Hybrid theme == {{{2
colorscheme hybrid
let g:hybrid_custom_term_colors = 1
" }}}


" == Neomake == {{{2
let g:neomake_javascript_enabled_makers = ['eslint']
autocmd! BufWritePost * Neomake
let g:neomake_open_list = 2
let g:neomake_list_height = 2
" }}}


" == FastFold == {{{2
let g:fastfold_savehook = 0 " Don't calculate folds on buffer save
" }}}

" }}}

" vim:foldmethod=marker:foldlevel=0
