" .vimrc file
" Created by Roman Zaynetdinov
" //github.com/zaynetro
"

" Vim options {{{

" No menus (:help menu.vim)
let did_install_default_menus = 1
let did_install_syntax_menu = 1

set modelines=1       " Enable file specific overrides
"set nocompatible     " Use Vim settings, rather than Vi (not working in neovim)
set mouse=a           " Enable mouse in all modes
set number            " Show line numbers
set relativenumber    " Show relative line numbers
set cursorline        " Highlight current line
set lazyredraw        " Redraw only when need to
set showmatch         " Highlight matching [{()}]
set incsearch         " Search as characters are entered
set ignorecase        " Case-insensitive search
set hlsearch          " Highlight search results
set showbreak=â‡‡       " Char to show on the wrapped lines
set showcmd           " Show typed command
set termguicolors     " Use true colors

" }}}


" Key mappings {{{

let mapleader=","     " Set leader key binding
" Quick escape
imap jk <ESC>
" Space open/closes folds
nnoremap <space> za

" }}}


" Formatting options {{{

set expandtab         " Tabs are spaces
set tabstop=2         " Number of visual spaces per tab
set softtabstop=2     " Number of spaces in tab when editing
set shiftwidth=2      " Number of columns to use for >< commands
filetype indent on    " Load filetype specific indent files

" }}}


" Backups {{{

" Store vim tmp files in different directory
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" }}}


" Folding {{{

set foldmethod=syntax    " Fold based on syntax
set foldlevelstart=99

" }}}


" Functions {{{

" Fix <C-h> in neovim and tmux
" https://github.com/neovim/neovim/issues/2048
" https://github.com/christoomey/vim-tmux-navigator#it-doesnt-work-in-neovim-specifically-c-h
" TODO: we might not need this anymore as the issue is closed
if has('nvim')
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif

" Strips trailing whitespace at the end of files
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Column 80 marker
" highlight OverLength ctermbg=red ctermfg=white guibg=#660000
" match OverLength /\%81v.\+/
if exists('+colorcolumn')
  set colorcolumn=80
endif

" Formats JSON
command! FormatJSON %!python -m json.tool

" }}}


" Plugins {{{

" Vim plug
call plug#begin('~/.vim/plugged')

" Defaults everyone can agree on
Plug 'tpope/vim-sensible'
" Polyglot (languages support)
Plug 'sheerun/vim-polyglot'
" Light status line
Plug 'itchyny/lightline.vim'
" Git gutter
Plug 'airblade/vim-gitgutter'
" Autocompletion
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
endif

" Tree explorer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Show git status in NERDTree
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
" Project drawer
Plug 'tpope/vim-vinegar'
" Distraction free writing
Plug 'junegunn/goyo.vim'
" Navigate between vim and tmux panes
Plug 'christoomey/vim-tmux-navigator'

" Display docs
Plug 'Shougo/echodoc.vim'
" Finder
Plug 'ctrlpvim/ctrlp.vim'
" Surf through buffers historically
Plug 'ton/vim-bufsurf'
" Search in files
Plug 'dyng/ctrlsf.vim'
" Papercolor theme
Plug 'NLKNguyen/papercolor-theme'

" Neomake syntastic replacement for neovim
Plug 'neomake/neomake'
" Calculate folding only when folds are used
Plug 'Konfekt/FastFold'
" Language server plugin
if has('nvim')
  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
endif
" Commenting
Plug 'tpope/vim-commentary'

call plug#end()

" }}}


" Plugin configurations {{{1

" == Vim sensible == {{{2
set list   "Makes whitespace chars visible
" }}}


" == Vim polyglot == {{{2
" If some file is not highlighed try :setfiletype nginx  To enable

" Markdown
let g:vim_markdown_folding_disabled=1

" JS
let g:javascript_enable_domhtmlcss = 1 " Highligh html/css inside JS

" Go
" :Gopath [path]  Override gopath
" :GoLink
" :GoDoc
" :GoDocBrowser
" :GoVet[!]  `go vet` (! - jump to first error)
" :GoDef [identifier]
" :GoTest[!]
" :GoTestFunc[!] [expand]
" :GoErrCheck
" :GoFiles  Show source files that depend on the current package
" :GoDeps
" :GoCallees  Show callees
" :GoCallers
" :GoChannelPeers  Show possible senders/receivers for the channel

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" goimport automatically inserts import paths
let g:go_fmt_command = "goimports"
" Don't collide with Syntastic
let g:go_fmt_fail_silently = 1
let g:go_list_type = "quickfix"

" Rust
" Doesn't work properly. Migrating to language server formatting.
let g:rustfmt_autosave = 0  " Auto format rust code
" let g:rustfmt_command = "cargo fmt"
" }}}


" == Lightline == {{{2
" Set colorscheme to 'PaperColor' for light theme
let g:lightline = {
  \   'colorscheme': 'Tomorrow_Night_Eighties',
  \   'component_function': {
  \     'filename': 'LightLineFilename'
  \   }
  \ }
function! LightLineFilename()
  return expand('%')
endfunction
" }}}


" == Git gutter == {{{2
" Disable realtime check:
"   let g:gitgutter_realtime = 0
"   let g:gitgutter_eager = 0
" }}}


" == Deoplete == {{{2
if has('nvim')
  let g:deoplete#enable_at_startup = 1
endif
" Use tab to forward cycle
inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" Use tab to backward cycle
inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
" Close the documentation window when completion is done
if has('nvim')
  autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
endif
" }}}


" == NERDTree == {{{2
" Type ? to see instant help
let NERDTreeShowHidden = 0
map <C-n> :NERDTreeToggle<CR>  " toggle NERDTree
" Do not override vim tmux navigator mappings
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'
" }}}


" == Goyo == {{{2
" :Goyo   To enable
" :Goyo [Width][XOffset][x[Height][YOffset]]
"   Ex: :Goyo 50x85% or :Goyo 50%+25%x50%-25%
" :Goyo!  To disable
" }}}


" == Echodoc == {{{2
set cmdheight=2
set noshowmode
let g:echodoc#enable_at_startup = 1
" Disable preview window
set completeopt-=preview
" }}}


" == CtrlP == {{{2
" open with <c-p>
" cycle using <c-j>, <c-k>
" <c-n>, <c-p> to the next previous string in the history
" <c-y> to create new file
" <c-z> to mark/unmark files and <c-o> to open them
" <c-d> search by filename (not path)
" <c-r> switch to regex mode
" <c-f>, <c-b> cycle between modes
" <F5> refresh cache
nnoremap <Leader>pl :CtrlPLine<Cr>
let g:ctrlp_user_command = 'ag %s -l --nocolor --nogroup --hidden
      \ --ignore .git
      \ -g ""'
let g:ctrlp_custom_ignore = '\v[\/](node_modules)|(\.(git))$'
" }}}


" == BufSurf == {{{2
nnoremap <Leader>pp :BufSurfBack<Cr>
nnoremap <Leader>nn :BufSurfForward<Cr>
" }}}


" == CtrlSF == {{{2
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
nmap     <C-F>l <Plug>CtrlSFQuickfixPrompt
vmap     <C-F>l <Plug>CtrlSFQuickfixVwordPath
vmap     <C-F>L <Plug>CtrlSFQuickfixVwordExec

"let g:ctrlsf_auto_close = 0
"let g:ctrlsf_confirm_save = 0 " Turn off file edit confirmation
let g:ctrlsf_indent = 2 " Spaces between line number and line content
" }}}


" == Neomake == {{{2
let g:neomake_javascript_enabled_makers = ['eslint']
autocmd! BufWritePost * Neomake
let g:neomake_open_list = 2
let g:neomake_list_height = 2
" }}}


" == FastFold == {{{2
let g:fastfold_savehook = 0 " Don't calculate folds on buffer save
" }}}


" == LanguageClient == {{{2
set hidden  " Required for operations modifying multiple buffers like rename.

let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'python': ['pyls'],
    \ }

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
" }}}

" }}}


" == Theme == {{{2
function! ToggleDark()
  set background=dark
  colorscheme Tomorrow-Night-Eighties
endfunction

function! ToggleLight()
  set background=light
  colorscheme PaperColor
endfunction

call ToggleDark()
" }}}


" vim:foldmethod=marker:foldlevel=0
